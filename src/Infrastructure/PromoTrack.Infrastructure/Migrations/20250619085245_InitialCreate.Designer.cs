// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PromoTrack.Infrastructure.Data;

#nullable disable

namespace PromoTrack.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250619085245_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PromoTrack.Domain.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.HasIndex("BrandName")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PromoTrack.Domain.BrandQuestionDefault", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("BrandQuestionDefaultId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMandatoryByDefault")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("BrandId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("BrandQuestionDefaults");
                });

            modelBuilder.Entity("PromoTrack.Domain.Campaign", b =>
                {
                    b.Property<int>("CampaignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CampaignId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CampaignName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CampaignId");

                    b.HasIndex("BrandId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("PromoTrack.Domain.CampaignProduct", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CampaignProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CampaignSpecificPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CampaignId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CampaignProducts");
                });

            modelBuilder.Entity("PromoTrack.Domain.CampaignQuestionConfig", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("CampaignQuestionConfigId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActiveForCampaign")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMandatoryForCampaign")
                        .HasColumnType("bit");

                    b.Property<int>("SortOrderForCampaign")
                        .HasColumnType("int");

                    b.HasKey("CampaignId", "QuestionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("CampaignQuestionConfigs");
                });

            modelBuilder.Entity("PromoTrack.Domain.ExtractedProductData", b =>
                {
                    b.Property<int>("ExtractedProductDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExtractedProductDataId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ItemsSold")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromoterActivityId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityOnShelf")
                        .HasColumnType("int");

                    b.HasKey("ExtractedProductDataId");

                    b.HasIndex("ProductId");

                    b.HasIndex("PromoterActivityId");

                    b.ToTable("ExtractedProductData");
                });

            modelBuilder.Entity("PromoTrack.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DefaultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("Sku")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PromoTrack.Domain.PromoterActivity", b =>
                {
                    b.Property<int>("PromoterActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromoterActivityId"));

                    b.Property<int>("CampaignId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CheckInLatitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<decimal?>("CheckInLongitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<DateTime?>("CheckInTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CheckOutLatitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<decimal?>("CheckOutLongitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<DateTime?>("CheckOutTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PromoterActivityId");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UserId");

                    b.ToTable("PromoterActivities");
                });

            modelBuilder.Entity("PromoTrack.Domain.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HintText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("PromoTrack.Domain.QuestionOption", b =>
                {
                    b.Property<int>("QuestionOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionOptionId"));

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("QuestionOptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("PromoTrack.Domain.ShelfImage", b =>
                {
                    b.Property<int>("ShelfImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShelfImageId"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PromoterActivityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ShelfImageId");

                    b.HasIndex("PromoterActivityId");

                    b.ToTable("ShelfImages");
                });

            modelBuilder.Entity("PromoTrack.Domain.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StoreId"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoreId");

                    b.HasIndex("StoreCode")
                        .IsUnique()
                        .HasFilter("[StoreCode] IS NOT NULL");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("PromoTrack.Domain.SurveyAnswer", b =>
                {
                    b.Property<int>("SurveyAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyAnswerId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnswerTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("PromoterActivityId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAnswerId");

                    b.HasIndex("PromoterActivityId");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("PromoTrack.Domain.SurveyAnswerSelectedOption", b =>
                {
                    b.Property<int>("SurveyAnswerSelectedOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyAnswerSelectedOptionId"));

                    b.Property<int>("QuestionOptionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyAnswerId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAnswerSelectedOptionId");

                    b.HasIndex("QuestionOptionId");

                    b.HasIndex("SurveyAnswerId");

                    b.ToTable("SurveyAnswerSelectedOptions");
                });

            modelBuilder.Entity("PromoTrack.Domain.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@promotrack.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = "$2a$11$s1aH.V3eGvL8aY2aB3c4D.5e6F7g8H9i0J1k2L3m4N5o6P7q8R9sT",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("PromoTrack.Domain.BrandQuestionDefault", b =>
                {
                    b.HasOne("PromoTrack.Domain.Brand", "Brand")
                        .WithMany("DefaultQuestions")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.Question", "Question")
                        .WithMany("BrandDefaults")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PromoTrack.Domain.Campaign", b =>
                {
                    b.HasOne("PromoTrack.Domain.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("PromoTrack.Domain.CampaignProduct", b =>
                {
                    b.HasOne("PromoTrack.Domain.Campaign", "Campaign")
                        .WithMany("CampaignProducts")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.Product", "Product")
                        .WithMany("CampaignProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PromoTrack.Domain.CampaignQuestionConfig", b =>
                {
                    b.HasOne("PromoTrack.Domain.Campaign", "Campaign")
                        .WithMany("QuestionConfigurations")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.Question", "Question")
                        .WithMany("CampaignConfigurations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PromoTrack.Domain.ExtractedProductData", b =>
                {
                    b.HasOne("PromoTrack.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.PromoterActivity", "PromoterActivity")
                        .WithMany("ProductData")
                        .HasForeignKey("PromoterActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PromoterActivity");
                });

            modelBuilder.Entity("PromoTrack.Domain.PromoterActivity", b =>
                {
                    b.HasOne("PromoTrack.Domain.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Store");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PromoTrack.Domain.QuestionOption", b =>
                {
                    b.HasOne("PromoTrack.Domain.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PromoTrack.Domain.ShelfImage", b =>
                {
                    b.HasOne("PromoTrack.Domain.PromoterActivity", "PromoterActivity")
                        .WithMany("ShelfImages")
                        .HasForeignKey("PromoterActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoterActivity");
                });

            modelBuilder.Entity("PromoTrack.Domain.SurveyAnswer", b =>
                {
                    b.HasOne("PromoTrack.Domain.PromoterActivity", "PromoterActivity")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("PromoterActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PromoterActivity");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PromoTrack.Domain.SurveyAnswerSelectedOption", b =>
                {
                    b.HasOne("PromoTrack.Domain.QuestionOption", "QuestionOption")
                        .WithMany()
                        .HasForeignKey("QuestionOptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PromoTrack.Domain.SurveyAnswer", "SurveyAnswer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("SurveyAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionOption");

                    b.Navigation("SurveyAnswer");
                });

            modelBuilder.Entity("PromoTrack.Domain.Brand", b =>
                {
                    b.Navigation("DefaultQuestions");
                });

            modelBuilder.Entity("PromoTrack.Domain.Campaign", b =>
                {
                    b.Navigation("CampaignProducts");

                    b.Navigation("QuestionConfigurations");
                });

            modelBuilder.Entity("PromoTrack.Domain.Product", b =>
                {
                    b.Navigation("CampaignProducts");
                });

            modelBuilder.Entity("PromoTrack.Domain.PromoterActivity", b =>
                {
                    b.Navigation("ProductData");

                    b.Navigation("ShelfImages");

                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("PromoTrack.Domain.Question", b =>
                {
                    b.Navigation("BrandDefaults");

                    b.Navigation("CampaignConfigurations");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("PromoTrack.Domain.SurveyAnswer", b =>
                {
                    b.Navigation("SelectedOptions");
                });
#pragma warning restore 612, 618
        }
    }
}

@using PromoTrack.Pwa.Models
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<EditForm Model="@store" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="space-y-4">
        <div>
            <label for="storeName" class="form-label">Store Name</label>
            <InputText id="storeName" class="form-input" @bind-Value="store.StoreName" />
            <ValidationMessage For="@(() => store.StoreName)" />
        </div>
        <div>
            <label for="addressLine1" class="form-label">Address</label>
            <InputText id="addressLine1" class="form-input" @bind-Value="store.AddressLine1" />
        </div>
        <div>
            <label for="city" class="form-label">City</label>
            <InputText id="city" class="form-input" @bind-Value="store.City" />
        </div>
        <div>
            <label for="province" class="form-label">Province</label>
            <InputText id="province" class="form-input" @bind-Value="store.Province" />
        </div>
    </div>

    <div class="mt-6 flex justify-end">
        <button type="submit" class="btn-primary" disabled="@isSubmitting">
            @(isSubmitting ? "Saving..." : "Create Store")
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public EventCallback<Store> OnStoreCreated { get; set; }

    private StoreCreateModel store = new();
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var response = await Http.PostAsJsonAsync("api/stores", store);

            if (response.IsSuccessStatusCode)
            {
                var newStore = await response.Content.ReadFromJsonAsync<Store>();
                if (newStore != null)
                {
                    await OnStoreCreated.InvokeAsync(newStore);
                }
            }
            else
            {
                Console.WriteLine($"Error creating store: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception during store creation: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class StoreCreateModel
    {
        [Required]
        public string StoreName { get; set; } = string.Empty;
        public string? AddressLine1 { get; set; }
        public string? City { get; set; }
        public string? Province { get; set; }
    }
}
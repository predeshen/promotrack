@using PromoTrack.Pwa.Models
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

@if (availableProducts == null)
{
    <p><em>Loading available products...</em></p>
}
else
{
    <EditForm Model="@productToAdd" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="space-y-4">
            <div>
                <label for="product" class="form-label">Product</label>
                <InputSelect id="product" class="form-input" @bind-Value="productToAdd.ProductId">
                    <option value="0">Select a product to add...</option>
                    @foreach (var product in availableProducts)
                    {
                        <option value="@product.ProductId">@product.ProductName (@product.Sku)</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => productToAdd.ProductId)" />
            </div>

            <div>
                <label for="campaignPrice" class="form-label">Campaign Specific Price (Optional)</label>
                <InputNumber id="campaignPrice" class="form-input" @bind-Value="productToAdd.CampaignSpecificPrice" />
                <p class="text-xs text-gray-500 mt-1">Leave blank to use the product's default price.</p>
            </div>
        </div>

        <div class="mt-6 flex justify-end">
            <button type="submit" class="btn-primary" disabled="@isSubmitting">
                @(isSubmitting ? "Adding..." : "Add Product to Campaign")
            </button>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public int CampaignId { get; set; }

    [Parameter]
    public EventCallback OnProductAdded { get; set; }

    private List<Product>? availableProducts;
    private AddProductModel productToAdd = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all products from the catalog to populate the dropdown
            availableProducts = await Http.GetFromJsonAsync<List<Product>>("api/products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching available products: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var response = await Http.PostAsJsonAsync($"api/campaigns/{CampaignId}/products", productToAdd);

            if (response.IsSuccessStatusCode)
            {
                await OnProductAdded.InvokeAsync();
            }
            else
            {
                Console.WriteLine($"Error adding product to campaign: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception when adding product: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class AddProductModel
    {
        [Range(1, int.MaxValue, ErrorMessage = "Please select a product.")]
        public int ProductId { get; set; }
        public decimal? CampaignSpecificPrice { get; set; }
    }
}
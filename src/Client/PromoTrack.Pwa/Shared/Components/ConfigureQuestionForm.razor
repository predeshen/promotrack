@using PromoTrack.Pwa.Models
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

@if (availableQuestions == null)
{
    <p><em>Loading available questions...</em></p>
}
else
{
    <EditForm Model="@questionConfig" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="space-y-4">
            <div>
                <label for="question" class="form-label">Question</label>
                <InputSelect id="question" class="form-input" @bind-Value="questionConfig.QuestionId">
                    <option value="0">Select a question to configure...</option>
                    @foreach (var question in availableQuestions)
                    {
                        <option value="@question.QuestionId">@question.QuestionText</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => questionConfig.QuestionId)" />
            </div>

            <div class="flex items-center space-x-4">
                <div class="flex items-center">
                    <InputCheckbox id="isMandatory" @bind-Value="questionConfig.IsMandatoryForCampaign" />
                    <label for="isMandatory" class="ml-2 form-label !mb-0">Is Mandatory?</label>
                </div>
                <div class="flex items-center">
                    <InputCheckbox id="isActive" @bind-Value="questionConfig.IsActiveForCampaign" />
                    <label for="isActive" class="ml-2 form-label !mb-0">Is Active?</label>
                </div>
            </div>
        </div>

        <div class="mt-6 flex justify-end">
            <button type="submit" class="btn-primary" disabled="@isSubmitting">
                @(isSubmitting ? "Saving..." : "Save Configuration")
            </button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int CampaignId { get; set; }

    [Parameter]
    public EventCallback OnQuestionConfigured { get; set; }

    private List<Question>? availableQuestions;
    private ConfigureQuestionModel questionConfig = new();
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            availableQuestions = await Http.GetFromJsonAsync<List<Question>>("api/questions");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching available questions: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        try
        {
            var response = await Http.PostAsJsonAsync($"api/campaigns/{CampaignId}/questions", questionConfig);

            if (response.IsSuccessStatusCode)
            {
                await OnQuestionConfigured.InvokeAsync();
            }
            else
            {
                Console.WriteLine($"Error configuring question: {await response.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception when configuring question: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    public class ConfigureQuestionModel
    {
        [Range(1, int.MaxValue, ErrorMessage = "Please select a question.")]
        public int QuestionId { get; set; }
        public bool IsActiveForCampaign { get; set; } = true;
        public bool IsMandatoryForCampaign { get; set; }
        public int SortOrderForCampaign { get; set; }
    }
}
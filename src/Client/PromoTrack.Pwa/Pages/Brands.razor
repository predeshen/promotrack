@page "/brands"
@inject HttpClient Http
@using PromoTrack.Pwa.Models
@using PromoTrack.Pwa.Shared
@using PromoTrack.Pwa.Shared.Components

<div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold">Brand Management</h1>
    <button class="btn-primary" @onclick="OpenCreateModal">
        + Create New Brand
    </button>
</div>

<div class="bg-surface rounded-lg shadow-md">
    @if (brands == null)
    {
        <p class="p-6"><em>Loading brands...</em></p>
    }
    else
    {
        <table class="w-full text-left">
            <thead class="border-b-2 border-border">
                <tr>
                    <th class="p-4">Brand Name</th>
                    <th class="p-4">Description</th>
                    <th class="p-4">Status</th>
                    <th class="p-4">Actions</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var brand in brands)
            {
                <tr class="border-b border-border last:border-b-0">
                    <td class="p-4 font-medium">
                        <!-- MAKE THIS A LINK -->
                        <a href="/brands/@brand.BrandId" class="text-blue-600 hover:text-blue-800 hover:underline">
                            @brand.BrandName
                        </a>
                    </td>
                    <td class="p-4 text-gray-600">@brand.Description</td>
                    <td class="p-4">
                        @if (brand.IsActive)
                        {
                            <span class="px-2 py-1 text-xs font-semibold text-green-800 bg-green-200 rounded-full">Active</span>
                        }
                        else
                        {
                            <span class="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-200 rounded-full">Inactive</span>
                        }
                    </td>
                    <td class="p-4">
                        <button class="text-sm font-medium text-blue-600 hover:text-blue-800">Edit</button>
                        <button class="ml-4 text-sm font-medium text-red-600 hover:text-red-800">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

<!-- Add the Modal and Form Component Here -->
<Modal IsOpen="isCreateModalOpen" Title="Create a New Brand" OnClose="CloseCreateModal">
    <CreateBrandForm OnBrandCreated="HandleBrandCreated" />
</Modal>


@code {
    private List<Brand>? brands;
    private bool isCreateModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrands();
    }

    private async Task LoadBrands()
    {
        try
        {
            brands = await Http.GetFromJsonAsync<List<Brand>>("api/brands");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching brands: {ex.Message}");
        }
    }

    private void OpenCreateModal()
    {
        isCreateModalOpen = true;
    }

    private void CloseCreateModal()
    {
        isCreateModalOpen = false;
    }

    private async Task HandleBrandCreated(Brand newBrand)
    {
        CloseCreateModal();
        // Optional: Add the new brand to the list locally to avoid a full refresh
        // brands?.Add(newBrand);
        // Or, just reload the list from the server to ensure data is fresh
        await LoadBrands();
        StateHasChanged(); // Tell Blazor to re-render the component
    }
}
@page "/brands/{BrandId:int}"
@inject HttpClient Http
@using PromoTrack.Pwa.Models
@using PromoTrack.Pwa.Shared
@using PromoTrack.Pwa.Shared.Components

@if (brand == null)
{
    <p><em>Loading brand details...</em></p>
}
else
{
    <!-- Page Header -->
    <div class="mb-8">
        <h1 class="text-4xl font-bold">@brand.BrandName</h1>
        <p class="text-lg text-gray-600">Default Question Management</p>
    </div>

    <!-- Main Content -->
    <div>
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-2xl font-semibold">Default Questions for this Brand</h2>
            <button class="btn-primary" @onclick="OpenAddQuestionModal">+ Add Default Question</button>
        </div>
        <div class="bg-surface rounded-lg shadow-md p-4 space-y-3">
            @if (brand.DefaultQuestions.Any())
            {
                @foreach (var config in brand.DefaultQuestions.OrderBy(c => c.SortOrder))
                {
                    <div class="p-3 border rounded-md">
                        <p class="font-semibold">@config.Question?.QuestionText</p>
                        <div class="flex items-center space-x-4 mt-2 text-xs">
                            <span class="font-medium @(config.IsMandatoryByDefault ? "text-red-600" : "text-gray-500")">
                                @(config.IsMandatoryByDefault ? "Mandatory" : "Optional")
                            </span>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-center text-gray-500 py-4">No default questions configured for this brand yet.</p>
            }
        </div>
    </div>
}

<!-- Modal for Adding a Default Question -->
<Modal IsOpen="isAddQuestionModalOpen" Title="Add Default Question to Brand" OnClose="CloseAddQuestionModal">
    <AddDefaultQuestionForm BrandId="BrandId" OnDefaultQuestionAdded="HandleDefaultQuestionAdded" />
</Modal>


@code {
    [Parameter]
    public int BrandId { get; set; }

    private Brand? brand;
    private bool isAddQuestionModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadBrandDetails();
    }

    private async Task LoadBrandDetails()
    {
        try
        {
            brand = await Http.GetFromJsonAsync<Brand>($"api/brands/{BrandId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching brand details: {ex.Message}");
        }
    }

    private void OpenAddQuestionModal() => isAddQuestionModalOpen = true;
    private void CloseAddQuestionModal() => isAddQuestionModalOpen = false;

    private async Task HandleDefaultQuestionAdded()
    {
        CloseAddQuestionModal();
        await LoadBrandDetails(); // Refresh the brand details to show the new question
        StateHasChanged();
    }
}
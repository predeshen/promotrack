@page "/products"
@inject HttpClient Http
@using PromoTrack.Pwa.Models
@using PromoTrack.Pwa.Shared
@using PromoTrack.Pwa.Shared.Components

<div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold">Product Catalog</h1>
    <button class="btn-primary" @onclick="OpenCreateModal">
        + Create New Product
    </button>
</div>

<div class="bg-surface rounded-lg shadow-md">
    @if (products == null)
    {
        <p class="p-6"><em>Loading products...</em></p>
    }
    else
    {
        <table class="w-full text-left">
            <thead class="border-b-2 border-border">
                <tr>
                    <th class="p-4">SKU</th>
                    <th class="p-4">Product Name</th>
                    <th class="p-4">Default Price</th>
                    <th class="p-4">Status</th>
                    <th class="p-4">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in products)
                {
                    <tr class="border-b border-border last:border-b-0">
                        <td class="p-4 font-mono text-sm">@product.Sku</td>
                        <td class="p-4 font-medium">@product.ProductName</td>
                        <td class="p-4 text-gray-600">@(product.DefaultPrice?.ToString("C", new System.Globalization.CultureInfo("en-ZA")))</td>
                        <td class="p-4">
                            @if (product.IsActive)
                            {
                                <span class="px-2 py-1 text-xs font-semibold text-green-800 bg-green-200 rounded-full">Active</span>
                            }
                            else
                            {
                                <span class="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-200 rounded-full">Inactive</span>
                            }
                        </td>
                        <td class="p-4">
                            <button class="text-sm font-medium text-blue-600 hover:text-blue-800">Edit</button>
                            <button class="ml-4 text-sm font-medium text-red-600 hover:text-red-800">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal for Creating a Product -->
<Modal IsOpen="isCreateModalOpen" Title="Create a New Product" OnClose="CloseCreateModal">
    <CreateProductForm OnProductCreated="HandleProductCreated" />
</Modal>

@code {
    private List<Product>? products;
    private bool isCreateModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        try
        {
            products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching products: {ex.Message}");
        }
    }

    private void OpenCreateModal() => isCreateModalOpen = true;
    private void CloseCreateModal() => isCreateModalOpen = false;

    private async Task HandleProductCreated(Product newProduct)
    {
        CloseCreateModal();
        await LoadProducts();
        StateHasChanged();
    }
}
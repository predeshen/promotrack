@page "/campaigns"
@inject HttpClient Http
@using PromoTrack.Pwa.Models
@using PromoTrack.Pwa.Shared
@using PromoTrack.Pwa.Shared.Components

<div class="flex justify-between items-center mb-6">
    <h1 class="text-3xl font-bold">Campaign Management</h1>
    <button class="btn-primary" @onclick="OpenCreateModal">
        + Create New Campaign
    </button>
</div>

<div class="bg-surface rounded-lg shadow-md">
    @if (campaigns == null)
    {
        <p class="p-6"><em>Loading campaigns...</em></p>
    }
    else
    {
        <table class="w-full text-left">
            <thead class="border-b-2 border-border">
                <tr>
                    <th class="p-4">Campaign Name</th>
                    <th class="p-4">Brand</th>
                    <th class="p-4">Date Range</th>
                    <th class="p-4">Status</th>
                    <th class="p-4">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var campaign in campaigns)
                {
                    <tr class="border-b border-border last:border-b-0">
                        <td class="p-4 font-medium">
                            <a href="/campaigns/@campaign.CampaignId" class="text-blue-600 hover:text-blue-800 hover:underline">
                                @campaign.CampaignName
                            </a>
                        </td>
                        <td class="p-4 text-gray-600">@(campaign.Brand?.BrandName)</td>
                        <td class="p-4 text-gray-600">@campaign.StartDate.ToShortDateString() - @campaign.EndDate.ToShortDateString()</td>
                        <td class="p-4">
                            @if (campaign.IsActive)
                            {
                                <span class="px-2 py-1 text-xs font-semibold text-green-800 bg-green-200 rounded-full">Active</span>
                            }
                            else
                            {
                                <span class="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-200 rounded-full">Inactive</span>
                            }
                        </td>
                        <td class="p-4">
                            <button class="text-sm font-medium text-blue-600 hover:text-blue-800">Edit</button>
                            <button class="ml-4 text-sm font-medium text-red-600 hover:text-red-800">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

<!-- Modal for Creating a Campaign -->
<Modal IsOpen="isCreateModalOpen" Title="Create a New Campaign" OnClose="CloseCreateModal">
    <CreateCampaignForm OnCampaignCreated="HandleCampaignCreated" />
</Modal>

@code {
    private List<Campaign>? campaigns;
    private bool isCreateModalOpen = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCampaigns();
    }

    private async Task LoadCampaigns()
    {
        try
        {
            campaigns = await Http.GetFromJsonAsync<List<Campaign>>("api/campaigns");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching campaigns: {ex.Message}");
        }
    }

    private void OpenCreateModal() => isCreateModalOpen = true;
    private void CloseCreateModal() => isCreateModalOpen = false;

    private async Task HandleCampaignCreated(Campaign newCampaign)
    {
        CloseCreateModal();
        await LoadCampaigns();
        StateHasChanged();
    }
}